import org.apache.tools.ant.taskdefs.condition.Os


// constructs the argument list that is used for spawning processes on linux/mac and windows
Iterable<String> buildProcSpawnArgList(Iterable<String> args) {
    List<String> newArguments = new ArrayList<String>()
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        // we append the 'cmd /c' command in front
        newArguments.add(0,'cmd.exe')
        newArguments.add(1,'/c')
    }
    newArguments.addAll(args.toList())
    return newArguments
}

Iterable<String> antScriptLocation(Object antScriptLocation) {
    return ['-f', antScriptLocation]
}


subprojects {
    // required plugins
    apply plugin: 'java'
    apply plugin: "maven-publish"
	
    // mps properties
	ext.mpsMajor = "3.3"
    ext.mpsMinor = "5"
    ext.mpsBuild = mpsMajor + "." + mpsMinor
    ext.mbeddrMpsDir = "MPS-mbeddr-" + mpsBuild
    ext.mpsBaseUrl = "http://download.jetbrains.com/mps/33/"

    // mbeddr properties
	// setting mbeddrMajor
	if (project.hasProperty('mbeddrMajor')) {
		ext.mbeddrMajor = project.getProperty('mbeddrMajor')
	} else {
		ext.mbeddrMajor = "1"	
	}
	
	// setting mbeddrMinor
	if (project.hasProperty('mbeddrMinor')) {
		ext.mbeddrMinor = project.getProperty('mbeddrMinor')
	} else {
		ext.mbeddrMinor = "0"	
	}
	
	// setting mbeddrBuild	
	if (project.hasProperty('mbeddrRelease')) {
		ext.mbeddrBuild = project.getProperty('mbeddrRelease')
	} else {
        def gitBranch = null
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            gitBranch ='cmd /c git rev-parse --abbrev-ref HEAD'.execute().in.text.trim().toString()
        } else {
            gitBranch ='git rev-parse --abbrev-ref HEAD'.execute().in.text.trim().toString()
        }
        ext.mbeddrBuild = gitBranch + "-SNAPSHOT"
	}
    ext.mbeddrBuildNumber = mbeddrMajor + "." + mbeddrMinor + "-" + mbeddrBuild

    // cbmc properties
    ext.cbmcMajor = "0.9"
    ext.cbmcMinor = "1"
    ext.cbmcBuild = mbeddrMajor + "." + mbeddrMinor

    // download jre credentials
    ext.serverUser = project.hasProperty('serverUser') ? project.getProperty('serverUser') : '<user>'
    ext.serverPassword = project.hasProperty('serverPassword') ? project.getProperty('serverPassword') : '<password>'

    // ant targets
    ext.CleanGeneratedCode_Task = "cleanSources"
    ext.CleanPlugins_Task = "clean"
    ext.GenerateCode_Task = "generate"
    ext.BuildPlugin_Task = "assemble"
    ext.RunTests_Task = "check"
    ext.script_targets = ['clean', 'generate', 'assemble']
    ext.assemble_targets = ['clean', 'assemble']	
    ext.test_targets = ['clean', 'generate', 'assemble', 'check']
    ext.languages_targets = ['clean', 'generate', 'assemble']
    ext.ex_tests_targets = ['clean', 'generate']	
    ext.rcp_targets = ['clean', 'build']
	
    // path variables
    ext.mps_home = '-Dmps.home=' + file(rootProject.projectDir.absolutePath + "/MPS/" + mbeddrMpsDir + "/").getAbsolutePath()
    ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
    ext.artifacts_root = '-Dartifacts.root=' + file(rootProject.projectDir.absolutePath + "/artifacts").getAbsolutePath()
	String buildVersion = '-Dbuild='+mbeddrBuild
	String majorVersion = '-Dmajor.version='+mbeddrMajor
	String minorVersion = '-Dminor.version='+mbeddrMinor
	ext.mbeddr_home = ['-Dmbeddr.github.core.home=' + file(rootProject.projectDir.absolutePath).getAbsolutePath(), minorVersion, majorVersion, buildVersion]
    ext.slall_home = ['-Dsl-all.home=' + file(rootProject.projectDir.absolutePath + '/code/plugins/sl-all').getAbsolutePath(), minorVersion, majorVersion, buildVersion]
    ext.dependsOnMPS_scriptArgs = ['ant', '-verbose', mps_home, build_dir, artifacts_root]
    ext.dependsOnMbeddr_scriptArgs = [*dependsOnMPS_scriptArgs, *mbeddr_home, *slall_home]

    // path locations
    ext.mbeddrScripts_basePath = file(ant.properties['mbeddr.github.core.home'] + "/build").getAbsolutePath()
    ext.allScripts_buildFileLocation = file(mbeddrScripts_basePath + "/" + "com.mbeddr.allScripts").getAbsolutePath()
    ext.slAll_buildFileLocation = file(ant.properties['mbeddr.github.core.home'] + "/scripts" + "/" + "sl-all").getAbsolutePath()

    // ant script locations
    ext.scriptsBasePath = file(rootProject.projectDir.absolutePath + "/scripts/").getAbsolutePath()

    ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
    ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'

    // repository urls
    if(project.hasProperty('mbeddrRelease')) {
        ext.repository = project.releaseRepository
    } else {
        ext.repository = project.snapshotRepository
    }

    ant.taskdef(name: "makeTests",
            classname: "com.mbeddr.tools.ant.MakeTestsTask",
            classpath: file(rootProject.projectDir.absolutePath + "/tools/ant/tasks/TeamcityMakeTests.jar")
    )

    // repository
    repositories {
        maven {
            if(hasProperty('nexusUsername')) {
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
            url repository
        }
    }

    // configs
    configurations {
        mps{
            description = 'mps distribution'
        }
        mbeddrAllScripts {
            description = 'mbeddr build scripts'
        }
        mbeddrAllInOne {
            description = 'mbeddr allInOne'
        }
        mbeddrPlatform {
            description = 'mbeddr platform distribution'
        }
        mbeddrRcp {
            description = 'mbeddr rcp'
        }
        mbeddrJre {
            description = 'jre used for rcp'
        }
        mbeddrDmg {
            description = 'mbeddr dmg for mac'
        }
        cbmcWin {
            description = 'cbmc windows'
        }
        cbmcLinux {
            description = 'cbmc linux'
        }
        cbmcMac {
            description = 'cbmc mac'
        }
        mbeddrTutorial {
            description = 'mbeddr tutorial'
        }
    }

	task wrapper(type: Wrapper) {
	    gradleVersion = '2.14'
	}

    task get_mps(type: Copy)  {
        from configurations.mps
        into rootProject.projectDir.absolutePath + "/MPS/"
    }

    task resolve_mps(type: Copy, dependsOn: get_mps)  {
        from zipTree(rootProject.projectDir.absolutePath + "/MPS/" + "mps-"+mpsBuild+".zip")
        into file(rootProject.projectDir.absolutePath + "/MPS/" + mbeddrMpsDir+ "/")
    }

    tasks.create(name: 'copy_allScripts', type: Copy, dependsOn: 'resolve_mps') {
        from rootProject.projectDir.absolutePath + "/build"
        include "*/*.xml"
        from rootProject.projectDir.absolutePath + "/code/plugins"
        include "*/*.xml"
        into rootProject.projectDir.absolutePath + "/scripts/"
    }

    def getVersionName = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
}

project(':build:com.jetbrains.mps') {
    publishing {
        publications {
            mps(MavenPublication) {
                groupId 'com.jetbrains'
                artifactId 'mps'
                version mpsBuild
                artifact(publishMPS) {}
            }
        }
        repositories {
            maven {
                if(project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.getProperty('nexusUsername')
                        password project.getProperty('nexusPassword')
                    }
                }
                url project.releaseRepository
            }
        }
    }
}

project(':build:com.mbeddr.allScripts') {
    publishing {
        publications {
            mbeddrAllScripts(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'allScripts'
                version mbeddrBuildNumber
                artifact(publish_allScripts) {}
            }
        }
        repositories {
            maven {
                if(project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.getProperty('nexusUsername')
                        password project.getProperty('nexusPassword')
                    }
                }
                url repository
            }
        }
    }
    dependencies {
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
    }
}

project(':build:com.mbeddr.build') {
    dependencies {
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
    }
}

project(':build:com.mbeddr.tests') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuildNumber
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuildNumber
    }
}

project(':build:com.mbeddr.platform') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuildNumber
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuildNumber
    }
    publishing {
        publications {
            mbeddrPlatform(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'platform'
                version mbeddrBuildNumber
                artifact(publish_mbeddrPlatform) {}
            }
        }
        repositories {
            maven {
                if(project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.getProperty('nexusUsername')
                        password project.getProperty('nexusPassword')
                    }
                }
                url repository
            }
        }
    }
}

project(':build:com.mbeddr.allInOne') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuildNumber
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuildNumber
    }
    publishing {
        publications {
            mbeddrAllInOne(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'allInOne'
                version mbeddrBuildNumber
                artifact(publish_all_in_one) {}
            }
        }
        repositories {
            maven {
                if(project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.getProperty('nexusUsername')
                        password project.getProperty('nexusPassword')
                    }
                }
                url repository
            }
        }
    }
}

project(':build:com.mbeddr.rcp') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')  // dep. because of tutorial?
        //compile project(':build:com.mbeddr.allInOne')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuildNumber
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuildNumber
        mbeddrAllInOne group: 'com.mbeddr', name: 'allInOne', version: mbeddrBuildNumber
    }
    publishing {
        publications {
            mbeddrRcp(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'rcp'
                version mbeddrBuildNumber
                artifact(publish_mbeddrRCP) {}
            }
            mbeddrJre(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'jre'
                version mbeddrBuildNumber
                artifact(publish_JRE) {}
            }
        }
        repositories {
            maven {
                if(project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.getProperty('nexusUsername')
                        password project.getProperty('nexusPassword')
                    }
                }
                url repository
            }
        }
    }
}

project(':build:com.mbeddr.release') {
    dependencies {
        //compile project(':build:com.mbeddr.allInOne')
        //compile project(':build:com.mbeddr.rcp')
        //compile project(':build:com.mbeddr.analyses.cbmc')
        //compile 'com.mbeddr:allInOne:0.9.1'
        //compile 'com.mbeddr:jre:0.9.1'
        //compile 'com.mbeddr:rcp:0.9.1'
        mbeddrJre group: 'com.mbeddr', name: 'jre', version: mbeddrBuildNumber
        mbeddrRcp group: 'com.mbeddr', name: 'rcp', version: mbeddrBuildNumber
        mbeddrAllInOne group: 'com.mbeddr', name: 'allInOne', version: mbeddrBuildNumber
        cbmcMac group: 'org.cprover', name: 'cbmc-mac', version: cbmcBuild
        cbmcLinux group: 'org.cprover', name: 'cbmc-linux', version: cbmcBuild
        cbmcWin group: 'org.cprover', name: 'cbmc-win', version: cbmcBuild
    }
   /* publishing {
        publications {
            mbeddrDmg(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'dmg'
                version mbeddrBuildNumber
                artifact(publish_mbeddrDmg) {}
            }
        }
        repositories {
            maven {
                url repository
            }
        }
    }*/
}

project(':build:com.mbeddr.analyses.cbmc') {
    publishing {
        publications {
            cbmcMac(MavenPublication) {
                groupId 'org.cprover'
                artifactId 'cbmc-mac'
                version cbmcBuild
                artifact(publish_cbmcMac) {}
            }
            cbmcLinux(MavenPublication) {
                groupId 'org.cprover'
                artifactId 'cbmc-linux'
                version cbmcBuild
                artifact(publish_cbmcLinux) {}
            }
            cbmcWin(MavenPublication) {
                groupId 'org.cprover'
                artifactId 'cbmc-win'
                version cbmcBuild
                artifact(publish_cbmcWin) {}
            }
        }
        repositories {
            maven {
                if(project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.getProperty('nexusUsername')
                        password project.getProperty('nexusPassword')
                    }
                }
                url project.releaseRepository
            }
        }
    }
}

project(':build:com.mbeddr.tutorial') {
    dependencies {
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuildNumber
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuildNumber
    }
    publishing {
        publications {
            mbeddrTutorial(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'tutorial'
                version mbeddrBuildNumber
                artifact(publish_mbeddrTutorial) {}
            }
        }
        repositories {
            maven {
                if(project.hasProperty('nexusUsername')) {
                    credentials {
                        username project.getProperty('nexusUsername')
                        password project.getProperty('nexusPassword')
                    }
                }
                url repository
            }
        }
    }
}
